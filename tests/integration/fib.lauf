module @fib;

const @test_failure = "test failure", 0;

function @fib_recursive(1 => 1) {
    local %arg : $Value;

    store_value %arg;

    load_value %arg; sint 1; $scmp;
    jump_if cmp_gt %recurse;

    load_value %arg;
    return;

label %recurse:
    load_value %arg; sint 1; $ssub;
    call @fib_recursive;

    load_value %arg; sint 2; $ssub;
    call @fib_recursive;

    $sadd;
    return;
}

function @fib_tail_call(3 => 1) { # n a b => F_n
    local %a : $Value;
    local %b : $Value;

    store_value %b;
    store_value %a;

    pick 0; sint 1; $scmp;
    jump_if cmp_gt %recurse;

    # (0 or 1) b a => (a or b)
    load_value %b; load_value %a; select 2;
    return;

label %recurse(1):
    sint 1; $ssub;                 # n => (n-1)
    load_value %b;                             # => (n-1) b
    pick 0; load_value %a; $sadd; # => (n-1) b (b+a)
    call @fib_tail_call;
    return;
}

function @fib_iter(1 => 1) {
    local %a : $Value;
    local %b : $Value;

    sint 0; store_value %a;
    sint 1; store_value %b;

    pick 0; sint 0; $scmp;
    jump_if cmp_eq %exit;

label %loop(1):
    load_value %b; # => b

    pick 0;             # => b b
    load_value %a;      # => b b a
    $sadd; # => b (b+a)

    store_value %b;
    store_value %a;

    sint 1; $ssub;
    pick 0; sint 0; $scmp;
    jump_if cmp_ne %loop;

label %exit(1):
    pop 1;
    load_value %a;
    return;
}

function @test_fib(0 => 0) {
    sint 10; call @fib_recursive;
    sint 55; $scmp;
    global_addr @test_failure; panic_if cmp_ne;

    sint 10; sint 0; sint 1; call @fib_tail_call;
    sint 55; $scmp;
    global_addr @test_failure; panic_if cmp_ne;

    sint 10; call @fib_iter;
    sint 55; $scmp;
    global_addr @test_failure; panic_if cmp_ne;

    return;
}

