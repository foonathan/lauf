module @heap;

const @test_failure = "test failure", 0;

function @assert_eq(2 => 0) {
    $scmp;
    global_addr @test_failure; panic_if cmp_ne;
    return;
}

function @test_heap_alloc(0 => 0) {
    local %ptr : $Value;

    layout_of $Value; $heap_alloc; store_value %ptr;

    sint 42; load_value %ptr; store_field $Value.0;

    load_value %ptr; load_field $Value.0;
    sint 42; call @assert_eq;

    load_value %ptr; $free_alloc;
    return;
}

function @test_many_heap_alloc(0 => 0) {
    local %ptr : $Value;
    local %n : $Value;

    layout_of $Value; $heap_alloc; store_value %ptr;
    sint 42; load_value %ptr; store_field $Value.0;

    sint 0; store_value %n;
label %loop:
    layout_of $Value; $heap_alloc; pop 1;

    load_value %n; sint 1; $sadd;
    pick 0; store_value %n;
    sint 4096; $scmp;
    jump_if cmp_ne %loop;

    load_value %ptr; load_field $Value.0;
    sint 42; call @assert_eq;
    return;
}

function @test_missing_free(0 => 0) {
    local %ptr : $Value;

    layout_of $Value; $heap_alloc; store_value %ptr;

    sint 42; load_value %ptr; store_field $Value.0;

    load_value %ptr; load_field $Value.0;
    sint 42; call @assert_eq;

    return;
}
function @test_leak_alloc(0 => 0) {
    local %ptr : $Value;

    layout_of $Value; $heap_alloc; store_value %ptr;

    sint 42; load_value %ptr; store_field $Value.0;

    load_value %ptr; load_field $Value.0;
    sint 42; call @assert_eq;

    load_value %ptr; $leak_alloc;
    return;
}

function @test_split(0 => 0) {
    local %ptr : $Value;
    local %ptr2 : $Value;

    sint 16; sint 8; $heap_alloc; store_value %ptr;

    sint 8; load_value %ptr; $split_alloc; store_value %ptr2; store_value %ptr;

    sint 42; load_value %ptr; store_field $Value.0;
    sint 11; load_value %ptr2; store_field $Value.0;

    load_value %ptr; load_field $Value.0; sint 42; call @assert_eq;
    load_value %ptr2; load_field $Value.0; sint 11; call @assert_eq;

    load_value %ptr; load_value %ptr2; $merge_alloc; store_value %ptr;
    load_value %ptr; $free_alloc;

    return;
}
function @test_split4(0 => 0) {
    local %ptr : $Value[4];

    sint 32; sint 8; $heap_alloc; sint 0; store_array_value %ptr;

    sint 16; sint 0; load_array_value %ptr; $split_alloc; sint 2; store_array_value %ptr; sint 0; store_array_value %ptr;

    sint 8; sint 0; load_array_value %ptr; $split_alloc; sint 1; store_array_value %ptr; sint 0; store_array_value %ptr;
    sint 8; sint 2; load_array_value %ptr; $split_alloc; sint 3; store_array_value %ptr; sint 2; store_array_value %ptr;

    sint 42; sint 0; load_array_value %ptr; store_field $Value.0;
    sint 11; sint 1; load_array_value %ptr; store_field $Value.0;
    sint 77; sint 2; load_array_value %ptr; store_field $Value.0;
    sint 99; sint 3; load_array_value %ptr; store_field $Value.0;

    sint 0; load_array_value %ptr; load_field $Value.0; sint 42; call @assert_eq;
    sint 1; load_array_value %ptr; load_field $Value.0; sint 11; call @assert_eq;
    sint 2; load_array_value %ptr; load_field $Value.0; sint 77; call @assert_eq;
    sint 3; load_array_value %ptr; load_field $Value.0; sint 99; call @assert_eq;

    sint 0; load_array_value %ptr;
    sint 1; load_array_value %ptr;
    $merge_alloc;
    sint 2; load_array_value %ptr;
    $merge_alloc;
    sint 3; load_array_value %ptr;
    $merge_alloc;
    $free_alloc;

    return;
}

