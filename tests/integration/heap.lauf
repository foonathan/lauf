module @heap;

const @test_failure = "test failure", 0;

function @assert_eq(2 => 0) {
    call_builtin @scmp;
    global_addr @test_failure; panic_if cmp_ne;
    return;
}

function @test_heap_alloc(0 => 0) {
    local %ptr : @Value;

    layout_of @Value; heap_alloc; store_value %ptr;

    int 42; load_value %ptr; store_field @Value.0;

    load_value %ptr; load_field @Value.0;
    int 42; call @assert_eq;

    load_value %ptr; free_alloc;
    return;
}

function @test_missing_free(0 => 0) {
    local %ptr : @Value;

    layout_of @Value; heap_alloc; store_value %ptr;

    int 42; load_value %ptr; store_field @Value.0;

    load_value %ptr; load_field @Value.0;
    int 42; call @assert_eq;

    return;
}

function @test_split(0 => 0) {
    local %ptr : @Value;
    local %ptr2 : @Value;

    int 16; int 8; heap_alloc; store_value %ptr;

    int 8; load_value %ptr; split_alloc; store_value %ptr2; store_value %ptr;

    int 42; load_value %ptr; store_field @Value.0;
    int 11; load_value %ptr2; store_field @Value.0;

    load_value %ptr; load_field @Value.0; int 42; call @assert_eq;
    load_value %ptr2; load_field @Value.0; int 11; call @assert_eq;

    load_value %ptr; load_value %ptr2; merge_alloc; store_value %ptr;
    load_value %ptr; free_alloc;

    return;
}
function @test_split4(0 => 0) {
    local %ptr : @Value[4];

    int 32; int 8; heap_alloc; int 0; store_array_value %ptr;

    int 16; int 0; load_array_value %ptr; split_alloc; int 2; store_array_value %ptr; int 0; store_array_value %ptr;

    int 8; int 0; load_array_value %ptr; split_alloc; int 1; store_array_value %ptr; int 0; store_array_value %ptr;
    int 8; int 2; load_array_value %ptr; split_alloc; int 3; store_array_value %ptr; int 2; store_array_value %ptr;

    int 42; int 0; load_array_value %ptr; store_field @Value.0;
    int 11; int 1; load_array_value %ptr; store_field @Value.0;
    int 77; int 2; load_array_value %ptr; store_field @Value.0;
    int 99; int 3; load_array_value %ptr; store_field @Value.0;

    int 0; load_array_value %ptr; load_field @Value.0; int 42; call @assert_eq;
    int 1; load_array_value %ptr; load_field @Value.0; int 11; call @assert_eq;
    int 2; load_array_value %ptr; load_field @Value.0; int 77; call @assert_eq;
    int 3; load_array_value %ptr; load_field @Value.0; int 99; call @assert_eq;

    int 0; load_array_value %ptr;
    int 1; load_array_value %ptr;
    merge_alloc;
    int 2; load_array_value %ptr;
    merge_alloc;
    int 3; load_array_value %ptr;
    merge_alloc;
    free_alloc;

    return;
}

